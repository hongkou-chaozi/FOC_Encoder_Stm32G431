var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"decoder/decoder","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\decoder0_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'decoder0'.\r\n *\r\n * Model version                  : 2.9\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  2 20:50:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"decoder0.h\"                  /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  decoder0_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  decoder0_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"decoder0.c","type":"source","group":"model","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\decoder0_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: decoder0.c\r\n *\r\n * Code generated for Simulink model 'decoder0'.\r\n *\r\n * Model version                  : 2.9\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  2 20:50:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"decoder0.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n\r\n/* Exported data definition */\r\n\r\n/* Definition for custom storage class: Struct */\r\nPMSM_Para_type PMSM_Para = {\r\n  /* Pn */\r\n  5.0F\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nstatic void Decoder_Step(const real32_T *rtd_Cnt_per_Rev, const uint32_T\r\n  *rtd_EncoderCnt, const uint32_T *rtd_EncoderIdx, real32_T *rtd_EncoderRPM,\r\n  real32_T *rtd_Encoder_eleAngle, const real32_T *rtd_Encoder_offset,\r\n  DW_Decoder_Step *localDW);\r\nstatic void decoder(DW_decoder *localDW);\r\n\r\n/* Output and update for atomic system: '<S1>/Decoder_Step' */\r\nstatic void Decoder_Step(const real32_T *rtd_Cnt_per_Rev, const uint32_T\r\n  *rtd_EncoderCnt, const uint32_T *rtd_EncoderIdx, real32_T *rtd_EncoderRPM,\r\n  real32_T *rtd_Encoder_eleAngle, const real32_T *rtd_Encoder_offset,\r\n  DW_Decoder_Step *localDW)\r\n{\r\n  real32_T rtb_Product;\r\n  real32_T rtb_Product_m;\r\n  uint32_T rtb_Delay;\r\n  uint32_T u1;\r\n\r\n  /* Outputs for IfAction SubSystem: '<S5>/PositionNoReset' incorporates:\r\n   *  ActionPort: '<S19>/Action Port'\r\n   */\r\n  /* If: '<S5>/If1' incorporates:\r\n   *  DataStoreRead: '<S2>/Data Store Read1'\r\n   *  DataStoreRead: '<S2>/Data Store Read2'\r\n   *  DataStoreRead: '<S2>/Data Store Read3'\r\n   *  DataTypeConversion: '<S22>/DTC'\r\n   *  DataTypeConversion: '<S24>/Data Type Conversion'\r\n   *  Fcn: '<S2>/Fcn'\r\n   *  Gain: '<S25>/Gain'\r\n   *  MinMax: '<S19>/MinMax'\r\n   *  Product: '<S5>/Product'\r\n   *  Sum: '<S19>/Sum3'\r\n   *  Sum: '<S19>/Sum7'\r\n   */\r\n  rtb_Delay = *rtd_EncoderCnt - *rtd_EncoderIdx;\r\n  u1 = rtb_Delay + (uint32_T)*rtd_Cnt_per_Rev;\r\n  if (rtb_Delay <= u1) {\r\n    u1 = rtb_Delay;\r\n  }\r\n\r\n  rtb_Product = 1.0F / *rtd_Cnt_per_Rev * 6.28318548F * (real32_T)u1;\r\n\r\n  /* End of If: '<S5>/If1' */\r\n  /* End of Outputs for SubSystem: '<S5>/PositionNoReset' */\r\n\r\n  /* If: '<S12>/If' incorporates:\r\n   *  Constant: '<S14>/Constant'\r\n   *  DataStoreRead: '<S2>/Data Store Read'\r\n   *  Gain: '<S17>/Number of pole pairs'\r\n   *  Sum: '<S14>/Add'\r\n   *  Sum: '<S15>/Add'\r\n   *  Switch: '<S11>/Switch'\r\n   */\r\n  if (rtb_Product <= *rtd_Encoder_offset) {\r\n    /* Outputs for IfAction SubSystem: '<S12>/If Action Subsystem' incorporates:\r\n     *  ActionPort: '<S14>/Action Port'\r\n     */\r\n    rtb_Product_m = (rtb_Product + 6.28318548F) - *rtd_Encoder_offset;\r\n\r\n    /* End of Outputs for SubSystem: '<S12>/If Action Subsystem' */\r\n  } else {\r\n    /* Outputs for IfAction SubSystem: '<S12>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S15>/Action Port'\r\n     */\r\n    rtb_Product_m = rtb_Product - *rtd_Encoder_offset;\r\n\r\n    /* End of Outputs for SubSystem: '<S12>/If Action Subsystem1' */\r\n  }\r\n\r\n  rtb_Product_m *= PMSM_Para.Pn;\r\n\r\n  /* End of If: '<S12>/If' */\r\n\r\n  /* Sum: '<S13>/Add' incorporates:\r\n   *  DataStoreWrite: '<S2>/Data Store Write'\r\n   *  Gain: '<S13>/Multiply'\r\n   *  Gain: '<S13>/Multiply1'\r\n   *  Rounding: '<S13>/Floor'\r\n   */\r\n  *rtd_Encoder_eleAngle = rtb_Product_m - floorf(0.159154937F * rtb_Product_m) *\r\n    6.28318548F;\r\n\r\n  /* DataTypeConversion: '<S6>/AlgoDataType' incorporates:\r\n   *  Constant: '<S6>/PositionToCount'\r\n   *  Product: '<S6>/Product'\r\n   */\r\n  rtb_Delay = (uint32_T)(6.83563648E+8F * rtb_Product);\r\n\r\n  /* Sum: '<S9>/Add1' incorporates:\r\n   *  DataStoreWrite: '<S2>/Data Store Write1'\r\n   *  DataTypeConversion: '<S27>/DTC'\r\n   *  Delay: '<S6>/Delay'\r\n   *  Gain: '<S6>/SpeedGain'\r\n   *  Product: '<S9>/Product'\r\n   *  Product: '<S9>/Product1'\r\n   *  Sum: '<S6>/SpeedCount'\r\n   *  UnitDelay: '<S9>/Unit Delay'\r\n   */\r\n  *rtd_EncoderRPM = (real32_T)((int32_T)rtb_Delay - (int32_T)\r\n    localDW->Delay_DSTATE[localDW->CircBufIdx]) * 4.65661287E-6F * 0.01F + 0.99F\r\n    * localDW->UnitDelay_DSTATE;\r\n\r\n  /* Update for Delay: '<S6>/Delay' */\r\n  localDW->Delay_DSTATE[localDW->CircBufIdx] = rtb_Delay;\r\n  if (localDW->CircBufIdx < 29U) {\r\n    localDW->CircBufIdx++;\r\n  } else {\r\n    localDW->CircBufIdx = 0U;\r\n  }\r\n\r\n  /* End of Update for Delay: '<S6>/Delay' */\r\n\r\n  /* Update for UnitDelay: '<S9>/Unit Delay' incorporates:\r\n   *  DataStoreWrite: '<S2>/Data Store Write1'\r\n   */\r\n  localDW->UnitDelay_DSTATE = *rtd_EncoderRPM;\r\n}\r\n\r\n/* Output and update for atomic system: '<Root>/decoder' */\r\nstatic void decoder(DW_decoder *localDW)\r\n{\r\n  real32_T EncoderRPM;\r\n  real32_T Encoder_eleAngle;\r\n\r\n  /* Outputs for Atomic SubSystem: '<S1>/Decoder_Step' */\r\n  Decoder_Step(&localDW->Cnt_per_Rev, &localDW->EncoderCnt, &localDW->EncoderIdx,\r\n               &EncoderRPM, &Encoder_eleAngle, &localDW->Encoder_offset,\r\n               &localDW->Decoder_Step_h);\r\n\r\n  /* End of Outputs for SubSystem: '<S1>/Decoder_Step' */\r\n}\r\n\r\n/* Model step function */\r\nvoid decoder0_step(void)\r\n{\r\n  /* Outputs for Atomic SubSystem: '<Root>/decoder' */\r\n  decoder(&rtDW.decoder_o);\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/decoder' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid decoder0_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"decoder0.h","type":"header","group":"model","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\decoder0_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: decoder0.h\r\n *\r\n * Code generated for Simulink model 'decoder0'.\r\n *\r\n * Model version                  : 2.9\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  2 20:50:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef decoder0_h_\r\n#define decoder0_h_\r\n#ifndef decoder0_COMMON_INCLUDES_\r\n#define decoder0_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"math.h\"\r\n#endif                                 /* decoder0_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<S1>/Decoder_Step' */\r\ntypedef struct {\r\n  real32_T UnitDelay_DSTATE;           /* '<S9>/Unit Delay' */\r\n  uint32_T Delay_DSTATE[30];           /* '<S6>/Delay' */\r\n  uint32_T CircBufIdx;                 /* '<S6>/Delay' */\r\n} DW_Decoder_Step;\r\n\r\n/* Block signals and states (default storage) for system '<Root>/decoder' */\r\ntypedef struct {\r\n  DW_Decoder_Step Decoder_Step_h;      /* '<S1>/Decoder_Step' */\r\n  real32_T Encoder_offset;             /* '<S1>/Data Store Memory' */\r\n  real32_T Cnt_per_Rev;                /* '<S1>/Data Store Memory3' */\r\n  uint32_T EncoderCnt;                 /* '<S1>/Data Store Memory1' */\r\n  uint32_T EncoderIdx;                 /* '<S1>/Data Store Memory2' */\r\n} DW_decoder;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  DW_decoder decoder_o;                /* '<Root>/decoder' */\r\n} DW;\r\n\r\n/* Type definition for custom storage class: Struct */\r\ntypedef struct PMSM_Para_tag {\r\n  real32_T Pn;                 /* Referenced by: '<S17>/Number of pole pairs' */\r\n} PMSM_Para_type;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* Model entry point functions */\r\nextern void decoder0_initialize(void);\r\nextern void decoder0_step(void);\r\n\r\n/* Exported data declaration */\r\n\r\n/* Declaration for custom storage class: Struct */\r\nextern PMSM_Para_type PMSM_Para;\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S3>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S11>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S4>/ReplaceInport_Npp' : Unused code path elimination\r\n * Block '<S6>/DataTypeSet' : Unused code path elimination\r\n * Block '<S6>/fixdtDatatype' : Unused code path elimination\r\n * Block '<S3>/One' : Unused code path elimination\r\n * Block '<S3>/Sum' : Unused code path elimination\r\n * Block '<S3>/UseInputPort' : Unused code path elimination\r\n * Block '<S3>/a' : Unused code path elimination\r\n * Block '<S11>/Constant' : Unused code path elimination\r\n * Block '<S11>/Constant1' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('decoder/decoder')    - opens subsystem decoder/decoder\r\n * hilite_system('decoder/decoder/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'decoder'\r\n * '<S1>'   : 'decoder/decoder'\r\n * '<S2>'   : 'decoder/decoder/Decoder_Step'\r\n * '<S3>'   : 'decoder/decoder/Decoder_Step/IIR Filter'\r\n * '<S4>'   : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position'\r\n * '<S5>'   : 'decoder/decoder/Decoder_Step/Quadrature Decoder'\r\n * '<S6>'   : 'decoder/decoder/Decoder_Step/Speed Measurement'\r\n * '<S7>'   : 'decoder/decoder/Decoder_Step/IIR Filter/IIR Filter'\r\n * '<S8>'   : 'decoder/decoder/Decoder_Step/IIR Filter/IIR Filter/Low-pass'\r\n * '<S9>'   : 'decoder/decoder/Decoder_Step/IIR Filter/IIR Filter/Low-pass/IIR Low Pass Filter'\r\n * '<S10>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec'\r\n * '<S11>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point'\r\n * '<S12>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset'\r\n * '<S13>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec'\r\n * '<S14>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset/If Action Subsystem'\r\n * '<S15>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset/If Action Subsystem1'\r\n * '<S16>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec/Variant Subsystem'\r\n * '<S17>'  : 'decoder/decoder/Decoder_Step/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec/Variant Subsystem/Dialog'\r\n * '<S18>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/DT_Handle'\r\n * '<S19>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/PositionNoReset'\r\n * '<S20>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/PositionResetAtIndex'\r\n * '<S21>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/Variant Subsystem'\r\n * '<S22>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/DT_Handle/floating-point'\r\n * '<S23>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/PositionNoReset/Variant Subsystem'\r\n * '<S24>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/PositionNoReset/Variant Subsystem/Input Port'\r\n * '<S25>'  : 'decoder/decoder/Decoder_Step/Quadrature Decoder/Variant Subsystem/Input Port'\r\n * '<S26>'  : 'decoder/decoder/Decoder_Step/Speed Measurement/DT_Handle'\r\n * '<S27>'  : 'decoder/decoder/Decoder_Step/Speed Measurement/DT_Handle/floating-point'\r\n */\r\n#endif                                 /* decoder0_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\decoder0_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'decoder0'.\r\n *\r\n * Model version                  : 2.9\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  2 20:50:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};