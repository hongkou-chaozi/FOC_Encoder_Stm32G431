var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"decoder/Decoder_FOC","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\Decoder_FOC_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'Decoder_FOC'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Sun Aug  4 23:04:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"Decoder_FOC.h\"               /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  Decoder_FOC_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  Decoder_FOC_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Decoder_FOC.c","type":"source","group":"model","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\Decoder_FOC_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Decoder_FOC.c\r\n *\r\n * Code generated for Simulink model 'Decoder_FOC'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Sun Aug  4 23:04:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Decoder_FOC.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n#include \"arm_math.h\"\r\n#include <float.h>\r\n#include \"math.h\"\r\n\r\n/* Named constants for Chart: '<S3>/Chart1' */\r\n#define IN_AlignStage                  ((uint8_T)1U)\r\n#define IN_IDLE                        ((uint8_T)2U)\r\n#define IN_OpenStage                   ((uint8_T)3U)\r\n#define IN_RunStage                    ((uint8_T)4U)\r\n#ifndef UCHAR_MAX\r\n#include <limits.h>\r\n#endif\r\n\r\n#if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )\r\n#error Code was generated for compiler with different sized uchar/char. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )\r\n#error Code was generated for compiler with different sized ushort/short. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized uint/int. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized ulong/long. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n/* Skipping ulong_long/long_long check: insufficient preprocessor integer range. */\r\n\r\n/* Exported block signals */\r\nreal32_T id_fb;                        /*  */\r\nreal32_T iq_fb;                        /*  */\r\n\r\n/* Exported data definition */\r\n\r\n/* Definition for custom storage class: Struct */\r\nPMSM_Para_type PMSM_Para = {\r\n  /* Pn */\r\n  5.0F\r\n};\r\n\r\ncur_PI_type cur_PI = {\r\n  /* Ki_cur */\r\n  1.5F,\r\n\r\n  /* Kp_cur */\r\n  0.09F\r\n};\r\n\r\nspd_PI_type spd_PI = {\r\n  /* Ki_spd */\r\n  0.007F,\r\n\r\n  /* Kp_spd */\r\n  0.01F\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nextern real32_T rt_modf_snf(real32_T u0, real32_T u1);\r\nstatic void currloop_Init(real_T *rty_RestsSingal, DW_currloop *localDW);\r\nstatic void currloop(real32_T rtu_MotorOnOff1, real32_T rtu_iq_ref, real32_T\r\n                     rtu_theta_fbk, real32_T rtu_Vdc, real32_T rtu_ia, real32_T\r\n                     rtu_ib, real32_T rtu_Ic, real_T *rty_RestsSingal, real_T\r\n                     rty_tABC[3], DW_currloop *localDW);\r\nstatic void rate_scheduler(void);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\nreal_T rtNaN = -(real_T)NAN;\r\nreal_T rtInf = (real_T)INFINITY;\r\nreal_T rtMinusInf = -(real_T)INFINITY;\r\nreal32_T rtNaNF = -(real32_T)NAN;\r\nreal32_T rtInfF = (real32_T)INFINITY;\r\nreal32_T rtMinusInfF = -(real32_T)INFINITY;\r\n\r\n/* Return rtNaN needed by the generated code. */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  return rtNaN;\r\n}\r\n\r\n/* Return rtNaNF needed by the generated code. */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  return rtNaNF;\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  return (boolean_T)(isnan(value) != 0);\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  return (boolean_T)(isnan(value) != 0);\r\n}\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (rtM->Timing.TaskCounters.TID[1])++;\r\n  if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.001s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n}\r\n\r\nreal32_T rt_modf_snf(real32_T u0, real32_T u1)\r\n{\r\n  real32_T y;\r\n  y = u0;\r\n  if (u1 == 0.0F) {\r\n    if (u0 == 0.0F) {\r\n      y = u1;\r\n    }\r\n  } else if (rtIsNaNF(u0) || rtIsNaNF(u1) || rtIsInfF(u0)) {\r\n    y = (rtNaNF);\r\n  } else if (u0 == 0.0F) {\r\n    y = 0.0F / u1;\r\n  } else if (rtIsInfF(u1)) {\r\n    if ((u1 < 0.0F) != (u0 < 0.0F)) {\r\n      y = u1;\r\n    }\r\n  } else {\r\n    boolean_T yEq;\r\n    y = fmodf(u0, u1);\r\n    yEq = (y == 0.0F);\r\n    if ((!yEq) && (u1 > floorf(u1))) {\r\n      real32_T q;\r\n      q = fabsf(u0 / u1);\r\n      yEq = !(fabsf(q - floorf(q + 0.5F)) > FLT_EPSILON * q);\r\n    }\r\n\r\n    if (yEq) {\r\n      y = u1 * 0.0F;\r\n    } else if ((u0 < 0.0F) != (u1 < 0.0F)) {\r\n      y += u1;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* System initialize for atomic system: '<S1>/currloop' */\r\nstatic void currloop_Init(real_T *rty_RestsSingal, DW_currloop *localDW)\r\n{\r\n  /* SystemInitialize for Chart: '<S3>/Chart1' */\r\n  *rty_RestsSingal = 0.0;\r\n\r\n  /* SystemInitialize for IfAction SubSystem: '<S3>/If Action Subsystem2' */\r\n  /* InitializeConditions for DiscreteIntegrator: '<S13>/Discrete-Time Integrator' */\r\n  localDW->DiscreteTimeIntegrator_PrevRese = 2;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S13>/Discrete-Time Integrator1' */\r\n  localDW->DiscreteTimeIntegrator1_PrevRes = 2;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S3>/If Action Subsystem2' */\r\n}\r\n\r\n/* Output and update for atomic system: '<S1>/currloop' */\r\nstatic void currloop(real32_T rtu_MotorOnOff1, real32_T rtu_iq_ref, real32_T\r\n                     rtu_theta_fbk, real32_T rtu_Vdc, real32_T rtu_ia, real32_T\r\n                     rtu_ib, real32_T rtu_Ic, real_T *rty_RestsSingal, real_T\r\n                     rty_tABC[3], DW_currloop *localDW)\r\n{\r\n  int32_T k;\r\n  real32_T tmpForInput_tmp[9];\r\n  real32_T cos_g;\r\n  real32_T rtb_DiscreteTimeIntegrator;\r\n  real32_T rtb_IProdOut;\r\n  real32_T rtb_Integrator_b;\r\n  real32_T rtb_Saturation;\r\n  real32_T rtb_algDD_o1;\r\n  real32_T rtb_algDD_o2;\r\n  real32_T sin_g;\r\n  real32_T tmpForInput_tmp_0;\r\n  int8_T tmp;\r\n  int8_T tmp_0;\r\n  boolean_T rtb_RelationalOperator_g;\r\n\r\n  /* Chart: '<S3>/Chart1' */\r\n  if (localDW->temporalCounter_i1 < 32767U) {\r\n    localDW->temporalCounter_i1++;\r\n  }\r\n\r\n  if (localDW->is_active_c7_Decoder_FOC == 0U) {\r\n    localDW->is_active_c7_Decoder_FOC = 1U;\r\n    localDW->is_c7_Decoder_FOC = IN_IDLE;\r\n  } else {\r\n    switch (localDW->is_c7_Decoder_FOC) {\r\n     case IN_AlignStage:\r\n      if (localDW->temporalCounter_i1 >= 1000) {\r\n        localDW->temporalCounter_i1 = 0U;\r\n        localDW->is_c7_Decoder_FOC = IN_OpenStage;\r\n        localDW->ZReset = 0.0F;\r\n        localDW->cnt = 0.0F;\r\n      } else if (rtu_MotorOnOff1 == 0.0F) {\r\n        localDW->is_c7_Decoder_FOC = IN_IDLE;\r\n      } else {\r\n        localDW->Motor_state = 2.0F;\r\n        *rty_RestsSingal = 0.0;\r\n      }\r\n      break;\r\n\r\n     case IN_IDLE:\r\n      if (rtu_MotorOnOff1 == 1.0F) {\r\n        localDW->temporalCounter_i1 = 0U;\r\n        localDW->is_c7_Decoder_FOC = IN_AlignStage;\r\n      } else {\r\n        localDW->Motor_state = 1.0F;\r\n        *rty_RestsSingal = 0.0;\r\n      }\r\n      break;\r\n\r\n     case IN_OpenStage:\r\n      if (rtu_MotorOnOff1 == 0.0F) {\r\n        localDW->is_c7_Decoder_FOC = IN_IDLE;\r\n      } else if (localDW->temporalCounter_i1 >= 30000) {\r\n        localDW->is_c7_Decoder_FOC = IN_RunStage;\r\n      } else {\r\n        if (localDW->cnt == 1.0F) {\r\n          localDW->ZReset = 1.0F;\r\n        }\r\n\r\n        localDW->cnt = 1.0F;\r\n        localDW->Motor_state = 3.0F;\r\n        *rty_RestsSingal = 0.0;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_RunStage: */\r\n      if (rtu_MotorOnOff1 == 0.0F) {\r\n        localDW->is_c7_Decoder_FOC = IN_IDLE;\r\n      } else {\r\n        localDW->Motor_state = 5.0F;\r\n        *rty_RestsSingal = 1.0;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<S3>/Chart1' */\r\n\r\n  /* SwitchCase: '<S3>/Switch Case1' */\r\n  switch ((int32_T)localDW->Motor_state) {\r\n   case 1:\r\n    /* Outputs for IfAction SubSystem: '<S3>/If Action Subsystem' incorporates:\r\n     *  ActionPort: '<S11>/Action Port'\r\n     */\r\n    /* Merge: '<S3>/Merge' incorporates:\r\n     *  Constant: '<S11>/Constant'\r\n     *  SignalConversion generated from: '<S11>/theta_fd'\r\n     */\r\n    localDW->Merge = 0.0F;\r\n\r\n    /* Merge: '<S3>/Merge1' incorporates:\r\n     *  Constant: '<S11>/Constant1'\r\n     *  SignalConversion generated from: '<S11>/iq_ref'\r\n     */\r\n    localDW->Merge1 = 0.0F;\r\n\r\n    /* End of Outputs for SubSystem: '<S3>/If Action Subsystem' */\r\n    break;\r\n\r\n   case 2:\r\n    /* Outputs for IfAction SubSystem: '<S3>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S12>/Action Port'\r\n     */\r\n    /* Merge: '<S3>/Merge' incorporates:\r\n     *  Constant: '<S12>/Constant'\r\n     *  SignalConversion generated from: '<S12>/theta_fd'\r\n     */\r\n    localDW->Merge = 0.0F;\r\n\r\n    /* Merge: '<S3>/Merge1' incorporates:\r\n     *  Constant: '<S12>/Constant1'\r\n     *  SignalConversion generated from: '<S12>/iq_ref'\r\n     */\r\n    localDW->Merge1 = 1.0F;\r\n\r\n    /* End of Outputs for SubSystem: '<S3>/If Action Subsystem1' */\r\n    break;\r\n\r\n   case 3:\r\n    /* Outputs for IfAction SubSystem: '<S3>/If Action Subsystem2' incorporates:\r\n     *  ActionPort: '<S13>/Action Port'\r\n     */\r\n    /* DiscreteIntegrator: '<S13>/Discrete-Time Integrator' */\r\n    if ((localDW->ZReset > 0.0F) && (localDW->DiscreteTimeIntegrator_PrevRese <=\r\n         0)) {\r\n      localDW->DiscreteTimeIntegrator_DSTATE = 0.0F;\r\n    }\r\n\r\n    rtb_DiscreteTimeIntegrator = localDW->DiscreteTimeIntegrator_DSTATE;\r\n\r\n    /* End of DiscreteIntegrator: '<S13>/Discrete-Time Integrator' */\r\n\r\n    /* DiscreteIntegrator: '<S13>/Discrete-Time Integrator1' */\r\n    if ((localDW->ZReset > 0.0F) && (localDW->DiscreteTimeIntegrator1_PrevRes <=\r\n         0)) {\r\n      localDW->DiscreteTimeIntegrator1_DSTATE = 0.0F;\r\n    }\r\n\r\n    /* Merge: '<S3>/Merge' incorporates:\r\n     *  Constant: '<S13>/Constant'\r\n     *  DiscreteIntegrator: '<S13>/Discrete-Time Integrator1'\r\n     *  Math: '<S13>/Mod'\r\n     */\r\n    localDW->Merge = rt_modf_snf(localDW->DiscreteTimeIntegrator1_DSTATE,\r\n      6.28318548F);\r\n\r\n    /* Merge: '<S3>/Merge1' incorporates:\r\n     *  Constant: '<S13>/Constant2'\r\n     *  SignalConversion generated from: '<S13>/iq_ref'\r\n     */\r\n    localDW->Merge1 = 1.0F;\r\n\r\n    /* Update for DiscreteIntegrator: '<S13>/Discrete-Time Integrator' incorporates:\r\n     *  Gain: '<S13>/Gain'\r\n     *  Product: '<S13>/Product'\r\n     */\r\n    localDW->DiscreteTimeIntegrator_DSTATE += PMSM_Para.Pn * 52.3598785F *\r\n      0.333333343F * 0.0001F;\r\n    if (localDW->ZReset > 0.0F) {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = 1;\r\n    } else if (localDW->ZReset < 0.0F) {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = -1;\r\n    } else if (localDW->ZReset == 0.0F) {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = 0;\r\n    } else {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S13>/Discrete-Time Integrator' */\r\n\r\n    /* Update for DiscreteIntegrator: '<S13>/Discrete-Time Integrator1' */\r\n    localDW->DiscreteTimeIntegrator1_DSTATE += 0.0001F *\r\n      rtb_DiscreteTimeIntegrator;\r\n    if (localDW->ZReset > 0.0F) {\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = 1;\r\n    } else if (localDW->ZReset < 0.0F) {\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = -1;\r\n    } else if (localDW->ZReset == 0.0F) {\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = 0;\r\n    } else {\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S13>/Discrete-Time Integrator1' */\r\n    /* End of Outputs for SubSystem: '<S3>/If Action Subsystem2' */\r\n    break;\r\n\r\n   case 4:\r\n    break;\r\n\r\n   case 5:\r\n    /* Outputs for IfAction SubSystem: '<S3>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S14>/Action Port'\r\n     */\r\n    /* Merge: '<S3>/Merge' incorporates:\r\n     *  SignalConversion generated from: '<S14>/theta_Close'\r\n     *  UnitDelay: '<S3>/Unit Delay1'\r\n     */\r\n    localDW->Merge = localDW->UnitDelay1_DSTATE;\r\n\r\n    /* Merge: '<S3>/Merge1' incorporates:\r\n     *  SignalConversion generated from: '<S14>/iq_CloseRef'\r\n     */\r\n    localDW->Merge1 = rtu_iq_ref;\r\n\r\n    /* End of Outputs for SubSystem: '<S3>/If Action Subsystem3' */\r\n    break;\r\n  }\r\n\r\n  /* End of SwitchCase: '<S3>/Switch Case1' */\r\n\r\n  /* Gain: '<S133>/convert_pu' incorporates:\r\n   *  DataStoreWrite: '<S3>/Data Store Write1'\r\n   */\r\n  rtb_DiscreteTimeIntegrator = 0.159154937F * localDW->Merge;\r\n\r\n  /* If: '<S133>/If' incorporates:\r\n   *  Constant: '<S134>/Constant'\r\n   *  DataTypeConversion: '<S135>/Convert_back'\r\n   *  DataTypeConversion: '<S135>/Convert_uint16'\r\n   *  DataTypeConversion: '<S136>/Convert_back'\r\n   *  DataTypeConversion: '<S136>/Convert_uint16'\r\n   *  Gain: '<S20>/indexing'\r\n   *  RelationalOperator: '<S134>/Compare'\r\n   *  Sum: '<S135>/Sum'\r\n   *  Sum: '<S136>/Sum'\r\n   */\r\n  if (rtb_DiscreteTimeIntegrator < 0.0F) {\r\n    /* Outputs for IfAction SubSystem: '<S133>/If Action Subsystem' incorporates:\r\n     *  ActionPort: '<S135>/Action Port'\r\n     */\r\n    tmpForInput_tmp_0 = rtb_DiscreteTimeIntegrator - (real32_T)(int16_T)floorf\r\n      (rtb_DiscreteTimeIntegrator);\r\n\r\n    /* End of Outputs for SubSystem: '<S133>/If Action Subsystem' */\r\n  } else {\r\n    /* Outputs for IfAction SubSystem: '<S133>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S136>/Action Port'\r\n     */\r\n    tmpForInput_tmp_0 = rtb_DiscreteTimeIntegrator - (real32_T)(int16_T)\r\n      rtb_DiscreteTimeIntegrator;\r\n\r\n    /* End of Outputs for SubSystem: '<S133>/If Action Subsystem1' */\r\n  }\r\n\r\n  rtb_DiscreteTimeIntegrator = 800.0F * tmpForInput_tmp_0;\r\n\r\n  /* End of If: '<S133>/If' */\r\n\r\n  /* Sum: '<S20>/Sum2' incorporates:\r\n   *  DataTypeConversion: '<S20>/Data Type Conversion1'\r\n   *  DataTypeConversion: '<S20>/Get_Integer'\r\n   */\r\n  rtb_Integrator_b = rtb_DiscreteTimeIntegrator - (real32_T)(uint16_T)\r\n    rtb_DiscreteTimeIntegrator;\r\n\r\n  /* Selector: '<S20>/Lookup' incorporates:\r\n   *  Constant: '<S20>/sine_table_values'\r\n   *  DataTypeConversion: '<S20>/Get_Integer'\r\n   */\r\n  sin_g = rtConstP.sine_table_values_Value[(uint16_T)rtb_DiscreteTimeIntegrator];\r\n\r\n  /* Sum: '<S132>/Sum4' incorporates:\r\n   *  Constant: '<S20>/offset'\r\n   *  Constant: '<S20>/sine_table_values'\r\n   *  DataStoreWrite: '<S3>/Data Store Write2'\r\n   *  DataTypeConversion: '<S20>/Get_Integer'\r\n   *  Product: '<S132>/Product'\r\n   *  Selector: '<S20>/Lookup'\r\n   *  Sum: '<S132>/Sum3'\r\n   *  Sum: '<S20>/Sum'\r\n   */\r\n  sin_g += (rtConstP.sine_table_values_Value[(int32_T)((uint16_T)\r\n             rtb_DiscreteTimeIntegrator + 1U)] - sin_g) * rtb_Integrator_b;\r\n\r\n  /* Selector: '<S20>/Lookup' incorporates:\r\n   *  Constant: '<S20>/offset'\r\n   *  Constant: '<S20>/sine_table_values'\r\n   *  DataTypeConversion: '<S20>/Get_Integer'\r\n   *  Sum: '<S132>/Sum5'\r\n   *  Sum: '<S20>/Sum'\r\n   */\r\n  cos_g = rtConstP.sine_table_values_Value[(int32_T)((uint16_T)\r\n    rtb_DiscreteTimeIntegrator + 200U)];\r\n\r\n  /* Sum: '<S132>/Sum6' incorporates:\r\n   *  Constant: '<S20>/offset'\r\n   *  Constant: '<S20>/sine_table_values'\r\n   *  DataStoreWrite: '<S3>/Data Store Write3'\r\n   *  DataTypeConversion: '<S20>/Get_Integer'\r\n   *  Product: '<S132>/Product1'\r\n   *  Selector: '<S20>/Lookup'\r\n   *  Sum: '<S132>/Sum5'\r\n   *  Sum: '<S20>/Sum'\r\n   */\r\n  cos_g += (rtConstP.sine_table_values_Value[(int32_T)((uint16_T)\r\n             rtb_DiscreteTimeIntegrator + 201U)] - cos_g) * rtb_Integrator_b;\r\n\r\n  /* Outputs for Atomic SubSystem: '<S17>/Two inputs CRL' */\r\n  /* AlgorithmDescriptorDelegate generated from: '<S77>/a16' incorporates:\r\n   *  DataStoreRead: '<S3>/Data Store Read4'\r\n   *  DataStoreRead: '<S3>/Data Store Read5'\r\n   *  Gain: '<S21>/one_by_3'\r\n   *  Gain: '<S21>/one_by_sqrt3_'\r\n   *  Sum: '<S21>/Sum'\r\n   *  Sum: '<S21>/Sum1'\r\n   *  Sum: '<S21>/Sum2'\r\n   */\r\n  arm_park_f32(rtu_ia - 0.333333343F * ((rtu_ia + rtu_ib) + rtu_Ic),\r\n               0.577350259F * (rtu_ib - rtu_Ic), &id_fb, &iq_fb, sin_g, cos_g);\r\n\r\n  /* End of Outputs for SubSystem: '<S17>/Two inputs CRL' */\r\n\r\n  /* Sum: '<S66>/Sum' incorporates:\r\n   *  Constant: '<S3>/Constant3'\r\n   *  Constant: '<S3>/Id_ref'\r\n   *  DiscreteIntegrator: '<S57>/Integrator'\r\n   *  Product: '<S62>/PProd Out'\r\n   *  Sum: '<S3>/Sum'\r\n   */\r\n  rtb_DiscreteTimeIntegrator = (0.0F - id_fb) * cur_PI.Kp_cur +\r\n    localDW->Integrator_DSTATE;\r\n\r\n  /* DeadZone: '<S49>/DeadZone' */\r\n  if (rtb_DiscreteTimeIntegrator > 15.0F) {\r\n    rtb_IProdOut = rtb_DiscreteTimeIntegrator - 15.0F;\r\n  } else if (rtb_DiscreteTimeIntegrator >= -15.0F) {\r\n    rtb_IProdOut = 0.0F;\r\n  } else {\r\n    rtb_IProdOut = rtb_DiscreteTimeIntegrator - -15.0F;\r\n  }\r\n\r\n  /* End of DeadZone: '<S49>/DeadZone' */\r\n\r\n  /* RelationalOperator: '<S47>/Relational Operator' incorporates:\r\n   *  Constant: '<S47>/Clamping_zero'\r\n   */\r\n  rtb_RelationalOperator_g = (rtb_IProdOut != 0.0F);\r\n\r\n  /* Product: '<S54>/IProd Out' incorporates:\r\n   *  Constant: '<S3>/Constant2'\r\n   *  Constant: '<S3>/Id_ref'\r\n   *  Sum: '<S3>/Sum'\r\n   */\r\n  rtb_Integrator_b = (0.0F - id_fb) * cur_PI.Ki_cur;\r\n\r\n  /* Switch: '<S47>/Switch1' incorporates:\r\n   *  Constant: '<S47>/Clamping_zero'\r\n   *  Constant: '<S47>/Constant'\r\n   *  Constant: '<S47>/Constant2'\r\n   *  RelationalOperator: '<S47>/fix for DT propagation issue'\r\n   */\r\n  if (rtb_IProdOut > 0.0F) {\r\n    tmp = 1;\r\n  } else {\r\n    tmp = -1;\r\n  }\r\n\r\n  /* Switch: '<S47>/Switch2' incorporates:\r\n   *  Constant: '<S47>/Clamping_zero'\r\n   *  Constant: '<S47>/Constant3'\r\n   *  Constant: '<S47>/Constant4'\r\n   *  RelationalOperator: '<S47>/fix for DT propagation issue1'\r\n   */\r\n  if (rtb_Integrator_b > 0.0F) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  /* Saturate: '<S64>/Saturation' */\r\n  if (rtb_DiscreteTimeIntegrator > 15.0F) {\r\n    rtb_Saturation = 15.0F;\r\n  } else if (rtb_DiscreteTimeIntegrator < -15.0F) {\r\n    rtb_Saturation = -15.0F;\r\n  } else {\r\n    rtb_Saturation = rtb_DiscreteTimeIntegrator;\r\n  }\r\n\r\n  /* End of Saturate: '<S64>/Saturation' */\r\n\r\n  /* Sum: '<S3>/Sum1' incorporates:\r\n   *  DataStoreWrite: '<S3>/Data Store Write'\r\n   */\r\n  rtb_IProdOut = localDW->Merge1 - iq_fb;\r\n\r\n  /* Sum: '<S123>/Sum' incorporates:\r\n   *  Constant: '<S3>/Constant1'\r\n   *  DiscreteIntegrator: '<S114>/Integrator'\r\n   *  Product: '<S119>/PProd Out'\r\n   */\r\n  rtb_DiscreteTimeIntegrator = rtb_IProdOut * cur_PI.Kp_cur +\r\n    localDW->Integrator_DSTATE_e;\r\n\r\n  /* Saturate: '<S121>/Saturation' incorporates:\r\n   *  DeadZone: '<S106>/DeadZone'\r\n   */\r\n  if (rtb_DiscreteTimeIntegrator > 15.0F) {\r\n    tmpForInput_tmp_0 = 15.0F;\r\n    rtb_DiscreteTimeIntegrator -= 15.0F;\r\n  } else {\r\n    if (rtb_DiscreteTimeIntegrator < -15.0F) {\r\n      tmpForInput_tmp_0 = -15.0F;\r\n    } else {\r\n      tmpForInput_tmp_0 = rtb_DiscreteTimeIntegrator;\r\n    }\r\n\r\n    if (rtb_DiscreteTimeIntegrator >= -15.0F) {\r\n      rtb_DiscreteTimeIntegrator = 0.0F;\r\n    } else {\r\n      rtb_DiscreteTimeIntegrator -= -15.0F;\r\n    }\r\n  }\r\n\r\n  /* Outputs for Atomic SubSystem: '<S16>/Two inputs CRL' */\r\n  /* AlgorithmDescriptorDelegate generated from: '<S75>/a16' incorporates:\r\n   *  DataStoreRead: '<S3>/Data Store Read2'\r\n   *  DataStoreRead: '<S3>/Data Store Read3'\r\n   *  Saturate: '<S121>/Saturation'\r\n   */\r\n  arm_inv_park_f32(rtb_Saturation, tmpForInput_tmp_0, &rtb_algDD_o1,\r\n                   &rtb_algDD_o2, sin_g, cos_g);\r\n\r\n  /* End of Outputs for SubSystem: '<S16>/Two inputs CRL' */\r\n\r\n  /* Gain: '<S74>/one_by_two' */\r\n  sin_g = 0.5F * rtb_algDD_o1;\r\n\r\n  /* Gain: '<S74>/sqrt3_by_two' */\r\n  cos_g = 0.866025388F * rtb_algDD_o2;\r\n\r\n  /* Sum: '<S74>/add_b' */\r\n  rtb_algDD_o2 = cos_g - sin_g;\r\n\r\n  /* Sum: '<S74>/add_c' */\r\n  sin_g = (0.0F - sin_g) - cos_g;\r\n\r\n  /* Product: '<S111>/IProd Out' incorporates:\r\n   *  Constant: '<S3>/Constant'\r\n   */\r\n  rtb_IProdOut *= cur_PI.Ki_cur;\r\n\r\n  /* Outputs for Atomic SubSystem: '<S3>/SVPWM' */\r\n  /* MinMax: '<S131>/Max' incorporates:\r\n   *  MinMax: '<S131>/Min'\r\n   */\r\n  tmpForInput_tmp[0] = rtb_algDD_o1;\r\n  tmpForInput_tmp[1] = rtb_algDD_o2;\r\n  tmpForInput_tmp[2] = sin_g;\r\n  tmpForInput_tmp[3] = rtb_algDD_o1;\r\n  tmpForInput_tmp[4] = rtb_algDD_o2;\r\n  tmpForInput_tmp[5] = sin_g;\r\n  tmpForInput_tmp[6] = rtb_algDD_o1;\r\n  tmpForInput_tmp[7] = rtb_algDD_o2;\r\n  tmpForInput_tmp[8] = sin_g;\r\n  cos_g = rtb_algDD_o1;\r\n\r\n  /* MinMax: '<S131>/Min' incorporates:\r\n   *  MinMax: '<S131>/Max'\r\n   */\r\n  rtb_Saturation = rtb_algDD_o1;\r\n  for (k = 0; k < 8; k++) {\r\n    /* MinMax: '<S131>/Max' */\r\n    tmpForInput_tmp_0 = tmpForInput_tmp[k + 1];\r\n    cos_g = fmaxf(cos_g, tmpForInput_tmp_0);\r\n\r\n    /* MinMax: '<S131>/Min' */\r\n    rtb_Saturation = fminf(rtb_Saturation, tmpForInput_tmp_0);\r\n  }\r\n\r\n  /* Gain: '<S131>/Gain' incorporates:\r\n   *  MinMax: '<S131>/Max'\r\n   *  MinMax: '<S131>/Min'\r\n   *  Sum: '<S131>/Sum'\r\n   */\r\n  cos_g = (cos_g + rtb_Saturation) * -0.5F;\r\n\r\n  /* Product: '<S19>/Product1' incorporates:\r\n   *  Constant: '<S19>/Constant'\r\n   *  Constant: '<S3>/PWM_HalfPeriod'\r\n   *  Gain: '<S19>/Gain'\r\n   *  Product: '<S19>/Product'\r\n   *  Sum: '<S19>/Sum'\r\n   *  Sum: '<S19>/Sum1'\r\n   */\r\n  rty_tABC[0] = (-(cos_g + rtb_algDD_o1) / rtu_Vdc + 0.5) * 8000.0;\r\n  rty_tABC[1] = (-(cos_g + rtb_algDD_o2) / rtu_Vdc + 0.5) * 8000.0;\r\n  rty_tABC[2] = (-(cos_g + sin_g) / rtu_Vdc + 0.5) * 8000.0;\r\n\r\n  /* End of Outputs for SubSystem: '<S3>/SVPWM' */\r\n\r\n  /* Update for UnitDelay: '<S3>/Unit Delay1' */\r\n  localDW->UnitDelay1_DSTATE = rtu_theta_fbk;\r\n\r\n  /* Switch: '<S47>/Switch' incorporates:\r\n   *  Constant: '<S47>/Constant1'\r\n   *  Logic: '<S47>/AND3'\r\n   *  RelationalOperator: '<S47>/Equal1'\r\n   *  Switch: '<S47>/Switch1'\r\n   *  Switch: '<S47>/Switch2'\r\n   */\r\n  if (rtb_RelationalOperator_g && (tmp == tmp_0)) {\r\n    rtb_Integrator_b = 0.0F;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S57>/Integrator' incorporates:\r\n   *  Switch: '<S47>/Switch'\r\n   */\r\n  localDW->Integrator_DSTATE += 0.0001F * rtb_Integrator_b;\r\n\r\n  /* Switch: '<S104>/Switch1' incorporates:\r\n   *  Constant: '<S104>/Clamping_zero'\r\n   *  Constant: '<S104>/Constant'\r\n   *  Constant: '<S104>/Constant2'\r\n   *  RelationalOperator: '<S104>/fix for DT propagation issue'\r\n   */\r\n  if (rtb_DiscreteTimeIntegrator > 0.0F) {\r\n    tmp = 1;\r\n  } else {\r\n    tmp = -1;\r\n  }\r\n\r\n  /* Switch: '<S104>/Switch2' incorporates:\r\n   *  Constant: '<S104>/Clamping_zero'\r\n   *  Constant: '<S104>/Constant3'\r\n   *  Constant: '<S104>/Constant4'\r\n   *  RelationalOperator: '<S104>/fix for DT propagation issue1'\r\n   */\r\n  if (rtb_IProdOut > 0.0F) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  /* Switch: '<S104>/Switch' incorporates:\r\n   *  Constant: '<S104>/Clamping_zero'\r\n   *  Constant: '<S104>/Constant1'\r\n   *  Logic: '<S104>/AND3'\r\n   *  RelationalOperator: '<S104>/Equal1'\r\n   *  RelationalOperator: '<S104>/Relational Operator'\r\n   *  Switch: '<S104>/Switch1'\r\n   *  Switch: '<S104>/Switch2'\r\n   */\r\n  if ((rtb_DiscreteTimeIntegrator != 0.0F) && (tmp == tmp_0)) {\r\n    rtb_IProdOut = 0.0F;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S114>/Integrator' incorporates:\r\n   *  Switch: '<S104>/Switch'\r\n   */\r\n  localDW->Integrator_DSTATE_e += 0.0001F * rtb_IProdOut;\r\n}\r\n\r\n/* Model step function */\r\nvoid Decoder_FOC_step(void)\r\n{\r\n  real32_T Add1;\r\n  real32_T Integrator;\r\n  real32_T rtb_DeadZone;\r\n  real32_T rtb_IntegralGain;\r\n  real32_T rtb_Sum;\r\n  uint32_T speedloop_ELAPS_T;\r\n  int8_T tmp;\r\n  int8_T tmp_0;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/Decoder_FOC' */\r\n  /* RateTransition: '<S1>/Rate Transition3' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* RateTransition: '<S1>/Rate Transition3' */\r\n    rtDW.RateTransition3 = rtDW.RateTransition3_Buffer0;\r\n  }\r\n\r\n  /* End of RateTransition: '<S1>/Rate Transition3' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S1>/currloop' */\r\n  /* Inport: '<Root>/Motor_OnOff' incorporates:\r\n   *  Inport: '<Root>/Ia'\r\n   *  Inport: '<Root>/Ib'\r\n   *  Inport: '<Root>/Ic'\r\n   *  Inport: '<Root>/theta_fbk'\r\n   *  Inport: '<Root>/v_bus'\r\n   *  Outport: '<Root>/tABC'\r\n   */\r\n  currloop(rtU.Motor_OnOff, rtDW.RateTransition3, rtU.theta_fbk, rtU.v_bus,\r\n           rtU.Ia, rtU.Ib, rtU.Ic, &rtDW.RestsSingal, rtY.tABC, &rtDW.currloop_d);\r\n\r\n  /* End of Outputs for SubSystem: '<S1>/currloop' */\r\n\r\n  /* Update for Atomic SubSystem: '<Root>/Decoder_FOC' */\r\n  /* Sum: '<S7>/Add1' incorporates:\r\n   *  Inport: '<Root>/wn_fbk'\r\n   *  Product: '<S7>/Product'\r\n   *  Product: '<S7>/Product1'\r\n   *  UnitDelay: '<S7>/Unit Delay'\r\n   */\r\n  Add1 = rtU.wn_fbk * 0.005F + 0.995F * rtDW.UnitDelay_DSTATE;\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/Decoder_FOC' */\r\n\r\n  /* RateTransition: '<S1>/Rate Transition2' incorporates:\r\n   *  RateTransition: '<S1>/Rate Transition1'\r\n   */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* S-Function (fcgen): '<S1>/Function-Call Generator' incorporates:\r\n     *  SubSystem: '<S1>/speedloop'\r\n     */\r\n    if (rtDW.speedloop_RESET_ELAPS_T) {\r\n      speedloop_ELAPS_T = 0U;\r\n    } else {\r\n      speedloop_ELAPS_T = rtM->Timing.clockTick1 - rtDW.speedloop_PREV_T;\r\n    }\r\n\r\n    rtDW.speedloop_PREV_T = rtM->Timing.clockTick1;\r\n    rtDW.speedloop_RESET_ELAPS_T = false;\r\n\r\n    /* Sum: '<S4>/Sum2' incorporates:\r\n     *  Inport: '<Root>/SpeedRef'\r\n     */\r\n    rtb_IntegralGain = (real32_T)rtU.SpeedRef - Add1;\r\n\r\n    /* DiscreteIntegrator: '<S173>/Integrator' incorporates:\r\n     *  RateTransition: '<S1>/Rate Transition7'\r\n     */\r\n    if (rtDW.Integrator_SYSTEM_ENABLE != 0) {\r\n      /* DiscreteIntegrator: '<S173>/Integrator' */\r\n      Integrator = rtDW.Integrator_DSTATE;\r\n    } else if ((rtDW.RestsSingal > 0.0) && (rtDW.Integrator_PrevResetState <= 0))\r\n    {\r\n      /* DiscreteIntegrator: '<S173>/Integrator' */\r\n      Integrator = 0.0F;\r\n    } else {\r\n      /* DiscreteIntegrator: '<S173>/Integrator' */\r\n      Integrator = (real32_T)(0.001 * (real_T)speedloop_ELAPS_T\r\n        * rtDW.Integrator_PREV_U) + rtDW.Integrator_DSTATE;\r\n    }\r\n\r\n    /* End of DiscreteIntegrator: '<S173>/Integrator' */\r\n\r\n    /* Sum: '<S182>/Sum' incorporates:\r\n     *  Gain: '<S178>/Proportional Gain'\r\n     */\r\n    rtb_Sum = spd_PI.Kp_spd * rtb_IntegralGain + Integrator;\r\n\r\n    /* DeadZone: '<S165>/DeadZone' incorporates:\r\n     *  Saturate: '<S180>/Saturation'\r\n     */\r\n    if (rtb_Sum > 3.0F) {\r\n      rtb_DeadZone = rtb_Sum - 3.0F;\r\n\r\n      /* Saturate: '<S180>/Saturation' */\r\n      rtDW.Saturation = 3.0F;\r\n    } else {\r\n      if (rtb_Sum >= -3.0F) {\r\n        rtb_DeadZone = 0.0F;\r\n      } else {\r\n        rtb_DeadZone = rtb_Sum - -3.0F;\r\n      }\r\n\r\n      if (rtb_Sum < -3.0F) {\r\n        /* Saturate: '<S180>/Saturation' */\r\n        rtDW.Saturation = -3.0F;\r\n      } else {\r\n        /* Saturate: '<S180>/Saturation' */\r\n        rtDW.Saturation = rtb_Sum;\r\n      }\r\n    }\r\n\r\n    /* End of DeadZone: '<S165>/DeadZone' */\r\n\r\n    /* Gain: '<S170>/Integral Gain' */\r\n    rtb_IntegralGain *= spd_PI.Ki_spd;\r\n\r\n    /* Update for DiscreteIntegrator: '<S173>/Integrator' incorporates:\r\n     *  RateTransition: '<S1>/Rate Transition7'\r\n     */\r\n    rtDW.Integrator_SYSTEM_ENABLE = 0U;\r\n    rtDW.Integrator_DSTATE = Integrator;\r\n    if (rtDW.RestsSingal > 0.0) {\r\n      rtDW.Integrator_PrevResetState = 1;\r\n    } else if (rtDW.RestsSingal < 0.0) {\r\n      rtDW.Integrator_PrevResetState = -1;\r\n    } else if (rtDW.RestsSingal == 0.0) {\r\n      rtDW.Integrator_PrevResetState = 0;\r\n    } else {\r\n      rtDW.Integrator_PrevResetState = 2;\r\n    }\r\n\r\n    /* Switch: '<S163>/Switch1' incorporates:\r\n     *  Constant: '<S163>/Clamping_zero'\r\n     *  Constant: '<S163>/Constant'\r\n     *  Constant: '<S163>/Constant2'\r\n     *  RelationalOperator: '<S163>/fix for DT propagation issue'\r\n     */\r\n    if (rtb_DeadZone > 0.0F) {\r\n      tmp = 1;\r\n    } else {\r\n      tmp = -1;\r\n    }\r\n\r\n    /* Switch: '<S163>/Switch2' incorporates:\r\n     *  Constant: '<S163>/Clamping_zero'\r\n     *  Constant: '<S163>/Constant3'\r\n     *  Constant: '<S163>/Constant4'\r\n     *  RelationalOperator: '<S163>/fix for DT propagation issue1'\r\n     */\r\n    if (rtb_IntegralGain > 0.0F) {\r\n      tmp_0 = 1;\r\n    } else {\r\n      tmp_0 = -1;\r\n    }\r\n\r\n    /* Switch: '<S163>/Switch' incorporates:\r\n     *  Constant: '<S163>/Clamping_zero'\r\n     *  Logic: '<S163>/AND3'\r\n     *  RelationalOperator: '<S163>/Equal1'\r\n     *  RelationalOperator: '<S163>/Relational Operator'\r\n     *  Switch: '<S163>/Switch1'\r\n     *  Switch: '<S163>/Switch2'\r\n     */\r\n    if ((rtb_DeadZone != 0.0F) && (tmp == tmp_0)) {\r\n      /* Update for DiscreteIntegrator: '<S173>/Integrator' incorporates:\r\n       *  Constant: '<S163>/Constant1'\r\n       */\r\n      rtDW.Integrator_PREV_U = 0.0F;\r\n    } else {\r\n      /* Update for DiscreteIntegrator: '<S173>/Integrator' */\r\n      rtDW.Integrator_PREV_U = rtb_IntegralGain;\r\n    }\r\n\r\n    /* End of Switch: '<S163>/Switch' */\r\n    /* End of Outputs for S-Function (fcgen): '<S1>/Function-Call Generator' */\r\n  }\r\n\r\n  /* End of RateTransition: '<S1>/Rate Transition2' */\r\n\r\n  /* Update for UnitDelay: '<S7>/Unit Delay' */\r\n  rtDW.UnitDelay_DSTATE = Add1;\r\n\r\n  /* Update for RateTransition: '<S1>/Rate Transition3' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    rtDW.RateTransition3_Buffer0 = rtDW.Saturation;\r\n  }\r\n\r\n  /* End of Update for RateTransition: '<S1>/Rate Transition3' */\r\n  /* End of Update for SubSystem: '<Root>/Decoder_FOC' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* Update absolute timer for sample time: [0.001s, 0.0s] */\r\n    /* The \"clockTick1\" counts the number of times the code of this task has\r\n     * been executed. The resolution of this integer timer is 0.001, which is the step size\r\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n     * application lifespan selected.\r\n     */\r\n    rtM->Timing.clockTick1++;\r\n  }\r\n\r\n  rate_scheduler();\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Decoder_FOC_initialize(void)\r\n{\r\n  /* SystemInitialize for Atomic SubSystem: '<Root>/Decoder_FOC' */\r\n  /* SystemInitialize for S-Function (fcgen): '<S1>/Function-Call Generator' incorporates:\r\n   *  SubSystem: '<S1>/speedloop'\r\n   */\r\n  /* InitializeConditions for DiscreteIntegrator: '<S173>/Integrator' */\r\n  rtDW.Integrator_PrevResetState = 2;\r\n\r\n  /* End of SystemInitialize for S-Function (fcgen): '<S1>/Function-Call Generator' */\r\n\r\n  /* SystemInitialize for Atomic SubSystem: '<S1>/currloop' */\r\n  currloop_Init(&rtDW.RestsSingal, &rtDW.currloop_d);\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S1>/currloop' */\r\n  /* End of SystemInitialize for SubSystem: '<Root>/Decoder_FOC' */\r\n\r\n  /* Enable for Atomic SubSystem: '<Root>/Decoder_FOC' */\r\n  /* Enable for S-Function (fcgen): '<S1>/Function-Call Generator' incorporates:\r\n   *  SubSystem: '<S1>/speedloop'\r\n   */\r\n  rtDW.speedloop_RESET_ELAPS_T = true;\r\n\r\n  /* Enable for DiscreteIntegrator: '<S173>/Integrator' */\r\n  rtDW.Integrator_SYSTEM_ENABLE = 1U;\r\n\r\n  /* End of Enable for S-Function (fcgen): '<S1>/Function-Call Generator' */\r\n  /* End of Enable for SubSystem: '<Root>/Decoder_FOC' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Decoder_FOC.h","type":"header","group":"model","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\Decoder_FOC_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Decoder_FOC.h\r\n *\r\n * Code generated for Simulink model 'Decoder_FOC'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Sun Aug  4 23:04:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Decoder_FOC_h_\r\n#define Decoder_FOC_h_\r\n#ifndef Decoder_FOC_COMMON_INCLUDES_\r\n#define Decoder_FOC_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"math.h\"\r\n#endif                                 /* Decoder_FOC_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<S1>/currloop' */\r\ntypedef struct {\r\n  real32_T Merge1;                     /* '<S3>/Merge1' */\r\n  real32_T Merge;                      /* '<S3>/Merge' */\r\n  real32_T Motor_state;                /* '<S3>/Chart1' */\r\n  real32_T ZReset;                     /* '<S3>/Chart1' */\r\n  real32_T UnitDelay1_DSTATE;          /* '<S3>/Unit Delay1' */\r\n  real32_T Integrator_DSTATE;          /* '<S57>/Integrator' */\r\n  real32_T Integrator_DSTATE_e;        /* '<S114>/Integrator' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE;/* '<S13>/Discrete-Time Integrator' */\r\n  real32_T DiscreteTimeIntegrator1_DSTATE;/* '<S13>/Discrete-Time Integrator1' */\r\n  real32_T cnt;                        /* '<S3>/Chart1' */\r\n  uint16_T temporalCounter_i1;         /* '<S3>/Chart1' */\r\n  int8_T DiscreteTimeIntegrator_PrevRese;/* '<S13>/Discrete-Time Integrator' */\r\n  int8_T DiscreteTimeIntegrator1_PrevRes;/* '<S13>/Discrete-Time Integrator1' */\r\n  uint8_T is_active_c7_Decoder_FOC;    /* '<S3>/Chart1' */\r\n  uint8_T is_c7_Decoder_FOC;           /* '<S3>/Chart1' */\r\n} DW_currloop;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  DW_currloop currloop_d;              /* '<S1>/currloop' */\r\n  real_T RestsSingal;                  /* '<S3>/Chart1' */\r\n  real32_T RateTransition3;            /* '<S1>/Rate Transition3' */\r\n  real32_T Saturation;                 /* '<S180>/Saturation' */\r\n  real32_T UnitDelay_DSTATE;           /* '<S7>/Unit Delay' */\r\n  real32_T Integrator_DSTATE;          /* '<S173>/Integrator' */\r\n  real32_T RateTransition3_Buffer0;    /* '<S1>/Rate Transition3' */\r\n  real32_T Integrator_PREV_U;          /* '<S173>/Integrator' */\r\n  uint32_T speedloop_PREV_T;           /* '<S1>/speedloop' */\r\n  int8_T Integrator_PrevResetState;    /* '<S173>/Integrator' */\r\n  uint8_T Integrator_SYSTEM_ENABLE;    /* '<S173>/Integrator' */\r\n  boolean_T speedloop_RESET_ELAPS_T;   /* '<S1>/speedloop' */\r\n} DW;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Computed Parameter: sine_table_values_Value\r\n   * Referenced by: '<S20>/sine_table_values'\r\n   */\r\n  real32_T sine_table_values_Value[1002];\r\n} ConstP;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T v_bus;                      /* '<Root>/v_bus' */\r\n  real32_T Motor_OnOff;                /* '<Root>/Motor_OnOff' */\r\n  real_T SpeedRef;                     /* '<Root>/SpeedRef' */\r\n  real32_T Ia;                         /* '<Root>/Ia' */\r\n  real32_T Ib;                         /* '<Root>/Ib' */\r\n  real32_T Ic;                         /* '<Root>/Ic' */\r\n  real32_T theta_fbk;                  /* '<Root>/theta_fbk' */\r\n  real32_T wn_fbk;                     /* '<Root>/wn_fbk' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T tABC[3];                      /* '<Root>/tABC' */\r\n} ExtY;\r\n\r\n/* Type definition for custom storage class: Struct */\r\ntypedef struct PMSM_Para_tag {\r\n  real32_T Pn;                         /* Referenced by: '<S13>/Gain' */\r\n} PMSM_Para_type;\r\n\r\ntypedef struct cur_PI_tag {\r\n  real32_T Ki_cur;                     /* Referenced by:\r\n                                        * '<S3>/Constant'\r\n                                        * '<S3>/Constant2'\r\n                                        */\r\n  real32_T Kp_cur;                     /* Referenced by:\r\n                                        * '<S3>/Constant1'\r\n                                        * '<S3>/Constant3'\r\n                                        */\r\n} cur_PI_type;\r\n\r\ntypedef struct spd_PI_tag {\r\n  real32_T Ki_spd;                   /* Referenced by: '<S170>/Integral Gain' */\r\n  real32_T Kp_spd;               /* Referenced by: '<S178>/Proportional Gain' */\r\n} spd_PI_type;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick1;\r\n    struct {\r\n      uint8_T TID[2];\r\n    } TaskCounters;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP rtConstP;\r\n\r\n/*\r\n * Exported Global Signals\r\n *\r\n * Note: Exported global signals are block signals with an exported global\r\n * storage class designation.  Code generation will declare the memory for\r\n * these signals and export their symbols.\r\n *\r\n */\r\nextern real32_T id_fb;                 /*  */\r\nextern real32_T iq_fb;                 /*  */\r\n\r\n/* Model entry point functions */\r\nextern void Decoder_FOC_initialize(void);\r\nextern void Decoder_FOC_step(void);\r\n\r\n/* Exported data declaration */\r\n\r\n/* Declaration for custom storage class: Struct */\r\nextern PMSM_Para_type PMSM_Para;\r\nextern cur_PI_type cur_PI;\r\nextern spd_PI_type spd_PI;\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S2>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S1>/Scope' : Unused code path elimination\r\n * Block '<S1>/Scope1' : Unused code path elimination\r\n * Block '<S21>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S13>/Scope' : Unused code path elimination\r\n * Block '<S13>/Scope1' : Unused code path elimination\r\n * Block '<S74>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S75>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S75>/Data Type Duplicate1' : Unused code path elimination\r\n * Block '<S77>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S77>/Data Type Duplicate1' : Unused code path elimination\r\n * Block '<S19>/Scope' : Unused code path elimination\r\n * Block '<S19>/Scope4' : Unused code path elimination\r\n * Block '<S131>/Scope' : Unused code path elimination\r\n * Block '<S3>/Scope' : Unused code path elimination\r\n * Block '<S3>/Scope1' : Unused code path elimination\r\n * Block '<S3>/Scope10' : Unused code path elimination\r\n * Block '<S3>/Scope2' : Unused code path elimination\r\n * Block '<S3>/Scope3' : Unused code path elimination\r\n * Block '<S3>/Scope4' : Unused code path elimination\r\n * Block '<S3>/Scope5' : Unused code path elimination\r\n * Block '<S3>/Scope8' : Unused code path elimination\r\n * Block '<S3>/Scope9' : Unused code path elimination\r\n * Block '<S20>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S20>/Data Type Propagation' : Unused code path elimination\r\n * Block '<S135>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S136>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S4>/Scope' : Unused code path elimination\r\n * Block '<S1>/Rate Transition' : Eliminated since input and output rates are identical\r\n * Block '<S1>/Rate Transition4' : Eliminated since input and output rates are identical\r\n * Block '<S21>/Kalphabeta0' : Eliminated nontunable gain of 1\r\n * Block '<S3>/Data Type Conversion' : Eliminate redundant data type conversion\r\n * Block '<S3>/Data Type Conversion1' : Eliminate redundant data type conversion\r\n * Block '<S3>/Data Type Conversion2' : Eliminate redundant data type conversion\r\n * Block '<S3>/Data Type Conversion5' : Eliminate redundant data type conversion\r\n * Block '<S74>/Ka' : Eliminated nontunable gain of 1\r\n * Block '<S74>/Kb' : Eliminated nontunable gain of 1\r\n * Block '<S74>/Kc' : Eliminated nontunable gain of 1\r\n * Block '<S20>/Get_FractionVal' : Eliminate redundant data type conversion\r\n * Block '<S2>/One' : Unused code path elimination\r\n * Block '<S2>/Sum' : Unused code path elimination\r\n * Block '<S2>/UseInputPort' : Unused code path elimination\r\n * Block '<S2>/a' : Unused code path elimination\r\n * Block '<S76>/Offset' : Unused code path elimination\r\n * Block '<S76>/Unary_Minus' : Unused code path elimination\r\n * Block '<S78>/Offset' : Unused code path elimination\r\n * Block '<S78>/Unary_Minus' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('decoder/Decoder_FOC')    - opens subsystem decoder/Decoder_FOC\r\n * hilite_system('decoder/Decoder_FOC/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'decoder'\r\n * '<S1>'   : 'decoder/Decoder_FOC'\r\n * '<S2>'   : 'decoder/Decoder_FOC/IIR Filter'\r\n * '<S3>'   : 'decoder/Decoder_FOC/currloop'\r\n * '<S4>'   : 'decoder/Decoder_FOC/speedloop'\r\n * '<S5>'   : 'decoder/Decoder_FOC/IIR Filter/IIR Filter'\r\n * '<S6>'   : 'decoder/Decoder_FOC/IIR Filter/IIR Filter/Low-pass'\r\n * '<S7>'   : 'decoder/Decoder_FOC/IIR Filter/IIR Filter/Low-pass/IIR Low Pass Filter'\r\n * '<S8>'   : 'decoder/Decoder_FOC/currloop/Chart1'\r\n * '<S9>'   : 'decoder/Decoder_FOC/currloop/Clarke Transform'\r\n * '<S10>'  : 'decoder/Decoder_FOC/currloop/D_Loop'\r\n * '<S11>'  : 'decoder/Decoder_FOC/currloop/If Action Subsystem'\r\n * '<S12>'  : 'decoder/Decoder_FOC/currloop/If Action Subsystem1'\r\n * '<S13>'  : 'decoder/Decoder_FOC/currloop/If Action Subsystem2'\r\n * '<S14>'  : 'decoder/Decoder_FOC/currloop/If Action Subsystem3'\r\n * '<S15>'  : 'decoder/Decoder_FOC/currloop/Inverse Clarke Transform'\r\n * '<S16>'  : 'decoder/Decoder_FOC/currloop/Inverse Park Transform'\r\n * '<S17>'  : 'decoder/Decoder_FOC/currloop/Park Transform'\r\n * '<S18>'  : 'decoder/Decoder_FOC/currloop/Q_Loop'\r\n * '<S19>'  : 'decoder/Decoder_FOC/currloop/SVPWM'\r\n * '<S20>'  : 'decoder/Decoder_FOC/currloop/Sine-Cosine Lookup'\r\n * '<S21>'  : 'decoder/Decoder_FOC/currloop/Clarke Transform/Three phase input'\r\n * '<S22>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Anti-windup'\r\n * '<S23>'  : 'decoder/Decoder_FOC/currloop/D_Loop/D Gain'\r\n * '<S24>'  : 'decoder/Decoder_FOC/currloop/D_Loop/External Derivative'\r\n * '<S25>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Filter'\r\n * '<S26>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Filter ICs'\r\n * '<S27>'  : 'decoder/Decoder_FOC/currloop/D_Loop/I Gain'\r\n * '<S28>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Ideal P Gain'\r\n * '<S29>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Ideal P Gain Fdbk'\r\n * '<S30>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Integrator'\r\n * '<S31>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Integrator ICs'\r\n * '<S32>'  : 'decoder/Decoder_FOC/currloop/D_Loop/N Copy'\r\n * '<S33>'  : 'decoder/Decoder_FOC/currloop/D_Loop/N Gain'\r\n * '<S34>'  : 'decoder/Decoder_FOC/currloop/D_Loop/P Copy'\r\n * '<S35>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Parallel P Gain'\r\n * '<S36>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Reset Signal'\r\n * '<S37>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Saturation'\r\n * '<S38>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Saturation Fdbk'\r\n * '<S39>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Sum'\r\n * '<S40>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Sum Fdbk'\r\n * '<S41>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tracking Mode'\r\n * '<S42>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tracking Mode Sum'\r\n * '<S43>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tsamp - Integral'\r\n * '<S44>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tsamp - Ngain'\r\n * '<S45>'  : 'decoder/Decoder_FOC/currloop/D_Loop/postSat Signal'\r\n * '<S46>'  : 'decoder/Decoder_FOC/currloop/D_Loop/preSat Signal'\r\n * '<S47>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Anti-windup/Disc. Clamping Parallel'\r\n * '<S48>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S49>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S50>'  : 'decoder/Decoder_FOC/currloop/D_Loop/D Gain/Disabled'\r\n * '<S51>'  : 'decoder/Decoder_FOC/currloop/D_Loop/External Derivative/Disabled'\r\n * '<S52>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Filter/Disabled'\r\n * '<S53>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Filter ICs/Disabled'\r\n * '<S54>'  : 'decoder/Decoder_FOC/currloop/D_Loop/I Gain/External Parameters'\r\n * '<S55>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Ideal P Gain/Passthrough'\r\n * '<S56>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Ideal P Gain Fdbk/Disabled'\r\n * '<S57>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Integrator/Discrete'\r\n * '<S58>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Integrator ICs/Internal IC'\r\n * '<S59>'  : 'decoder/Decoder_FOC/currloop/D_Loop/N Copy/Disabled wSignal Specification'\r\n * '<S60>'  : 'decoder/Decoder_FOC/currloop/D_Loop/N Gain/Disabled'\r\n * '<S61>'  : 'decoder/Decoder_FOC/currloop/D_Loop/P Copy/Disabled'\r\n * '<S62>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Parallel P Gain/External Parameters'\r\n * '<S63>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Reset Signal/Disabled'\r\n * '<S64>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Saturation/Enabled'\r\n * '<S65>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Saturation Fdbk/Disabled'\r\n * '<S66>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Sum/Sum_PI'\r\n * '<S67>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Sum Fdbk/Disabled'\r\n * '<S68>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tracking Mode/Disabled'\r\n * '<S69>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tracking Mode Sum/Passthrough'\r\n * '<S70>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tsamp - Integral/TsSignalSpecification'\r\n * '<S71>'  : 'decoder/Decoder_FOC/currloop/D_Loop/Tsamp - Ngain/Passthrough'\r\n * '<S72>'  : 'decoder/Decoder_FOC/currloop/D_Loop/postSat Signal/Forward_Path'\r\n * '<S73>'  : 'decoder/Decoder_FOC/currloop/D_Loop/preSat Signal/Forward_Path'\r\n * '<S74>'  : 'decoder/Decoder_FOC/currloop/Inverse Clarke Transform/Two phase input'\r\n * '<S75>'  : 'decoder/Decoder_FOC/currloop/Inverse Park Transform/Two inputs CRL'\r\n * '<S76>'  : 'decoder/Decoder_FOC/currloop/Inverse Park Transform/Two inputs CRL/Switch_Axis'\r\n * '<S77>'  : 'decoder/Decoder_FOC/currloop/Park Transform/Two inputs CRL'\r\n * '<S78>'  : 'decoder/Decoder_FOC/currloop/Park Transform/Two inputs CRL/Switch_Axis'\r\n * '<S79>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Anti-windup'\r\n * '<S80>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/D Gain'\r\n * '<S81>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/External Derivative'\r\n * '<S82>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Filter'\r\n * '<S83>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Filter ICs'\r\n * '<S84>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/I Gain'\r\n * '<S85>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Ideal P Gain'\r\n * '<S86>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Ideal P Gain Fdbk'\r\n * '<S87>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Integrator'\r\n * '<S88>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Integrator ICs'\r\n * '<S89>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/N Copy'\r\n * '<S90>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/N Gain'\r\n * '<S91>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/P Copy'\r\n * '<S92>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Parallel P Gain'\r\n * '<S93>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Reset Signal'\r\n * '<S94>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Saturation'\r\n * '<S95>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Saturation Fdbk'\r\n * '<S96>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Sum'\r\n * '<S97>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Sum Fdbk'\r\n * '<S98>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Tracking Mode'\r\n * '<S99>'  : 'decoder/Decoder_FOC/currloop/Q_Loop/Tracking Mode Sum'\r\n * '<S100>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Tsamp - Integral'\r\n * '<S101>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Tsamp - Ngain'\r\n * '<S102>' : 'decoder/Decoder_FOC/currloop/Q_Loop/postSat Signal'\r\n * '<S103>' : 'decoder/Decoder_FOC/currloop/Q_Loop/preSat Signal'\r\n * '<S104>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Anti-windup/Disc. Clamping Parallel'\r\n * '<S105>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S106>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S107>' : 'decoder/Decoder_FOC/currloop/Q_Loop/D Gain/Disabled'\r\n * '<S108>' : 'decoder/Decoder_FOC/currloop/Q_Loop/External Derivative/Disabled'\r\n * '<S109>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Filter/Disabled'\r\n * '<S110>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Filter ICs/Disabled'\r\n * '<S111>' : 'decoder/Decoder_FOC/currloop/Q_Loop/I Gain/External Parameters'\r\n * '<S112>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Ideal P Gain/Passthrough'\r\n * '<S113>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Ideal P Gain Fdbk/Disabled'\r\n * '<S114>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Integrator/Discrete'\r\n * '<S115>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Integrator ICs/Internal IC'\r\n * '<S116>' : 'decoder/Decoder_FOC/currloop/Q_Loop/N Copy/Disabled wSignal Specification'\r\n * '<S117>' : 'decoder/Decoder_FOC/currloop/Q_Loop/N Gain/Disabled'\r\n * '<S118>' : 'decoder/Decoder_FOC/currloop/Q_Loop/P Copy/Disabled'\r\n * '<S119>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Parallel P Gain/External Parameters'\r\n * '<S120>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Reset Signal/Disabled'\r\n * '<S121>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Saturation/Enabled'\r\n * '<S122>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Saturation Fdbk/Disabled'\r\n * '<S123>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Sum/Sum_PI'\r\n * '<S124>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Sum Fdbk/Disabled'\r\n * '<S125>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Tracking Mode/Disabled'\r\n * '<S126>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Tracking Mode Sum/Passthrough'\r\n * '<S127>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Tsamp - Integral/TsSignalSpecification'\r\n * '<S128>' : 'decoder/Decoder_FOC/currloop/Q_Loop/Tsamp - Ngain/Passthrough'\r\n * '<S129>' : 'decoder/Decoder_FOC/currloop/Q_Loop/postSat Signal/Forward_Path'\r\n * '<S130>' : 'decoder/Decoder_FOC/currloop/Q_Loop/preSat Signal/Forward_Path'\r\n * '<S131>' : 'decoder/Decoder_FOC/currloop/SVPWM/ie_t'\r\n * '<S132>' : 'decoder/Decoder_FOC/currloop/Sine-Cosine Lookup/Interpolation'\r\n * '<S133>' : 'decoder/Decoder_FOC/currloop/Sine-Cosine Lookup/WrapUp'\r\n * '<S134>' : 'decoder/Decoder_FOC/currloop/Sine-Cosine Lookup/WrapUp/Compare To Zero'\r\n * '<S135>' : 'decoder/Decoder_FOC/currloop/Sine-Cosine Lookup/WrapUp/If Action Subsystem'\r\n * '<S136>' : 'decoder/Decoder_FOC/currloop/Sine-Cosine Lookup/WrapUp/If Action Subsystem1'\r\n * '<S137>' : 'decoder/Decoder_FOC/speedloop/PID Controller3'\r\n * '<S138>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Anti-windup'\r\n * '<S139>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/D Gain'\r\n * '<S140>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/External Derivative'\r\n * '<S141>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Filter'\r\n * '<S142>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Filter ICs'\r\n * '<S143>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/I Gain'\r\n * '<S144>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Ideal P Gain'\r\n * '<S145>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Ideal P Gain Fdbk'\r\n * '<S146>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Integrator'\r\n * '<S147>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Integrator ICs'\r\n * '<S148>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/N Copy'\r\n * '<S149>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/N Gain'\r\n * '<S150>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/P Copy'\r\n * '<S151>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Parallel P Gain'\r\n * '<S152>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Reset Signal'\r\n * '<S153>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Saturation'\r\n * '<S154>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Saturation Fdbk'\r\n * '<S155>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Sum'\r\n * '<S156>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Sum Fdbk'\r\n * '<S157>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tracking Mode'\r\n * '<S158>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tracking Mode Sum'\r\n * '<S159>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tsamp - Integral'\r\n * '<S160>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tsamp - Ngain'\r\n * '<S161>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/postSat Signal'\r\n * '<S162>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/preSat Signal'\r\n * '<S163>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Anti-windup/Disc. Clamping Parallel'\r\n * '<S164>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S165>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S166>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/D Gain/Disabled'\r\n * '<S167>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/External Derivative/Disabled'\r\n * '<S168>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Filter/Disabled'\r\n * '<S169>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Filter ICs/Disabled'\r\n * '<S170>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/I Gain/Internal Parameters'\r\n * '<S171>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Ideal P Gain/Passthrough'\r\n * '<S172>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Ideal P Gain Fdbk/Disabled'\r\n * '<S173>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Integrator/Discrete'\r\n * '<S174>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Integrator ICs/Internal IC'\r\n * '<S175>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/N Copy/Disabled wSignal Specification'\r\n * '<S176>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/N Gain/Disabled'\r\n * '<S177>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/P Copy/Disabled'\r\n * '<S178>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Parallel P Gain/Internal Parameters'\r\n * '<S179>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Reset Signal/External Reset'\r\n * '<S180>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Saturation/Enabled'\r\n * '<S181>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Saturation Fdbk/Disabled'\r\n * '<S182>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Sum/Sum_PI'\r\n * '<S183>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Sum Fdbk/Disabled'\r\n * '<S184>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tracking Mode/Disabled'\r\n * '<S185>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tracking Mode Sum/Passthrough'\r\n * '<S186>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tsamp - Integral/TsSignalSpecification'\r\n * '<S187>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/Tsamp - Ngain/Passthrough'\r\n * '<S188>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/postSat Signal/Forward_Path'\r\n * '<S189>' : 'decoder/Decoder_FOC/speedloop/PID Controller3/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* Decoder_FOC_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Decoder_FOC_data.c","type":"source","group":"data","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\Decoder_FOC_ert_rtw","tag":"","groupDisplay":"数据文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Decoder_FOC_data.c\r\n *\r\n * Code generated for Simulink model 'Decoder_FOC'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Sun Aug  4 23:04:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Decoder_FOC.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP rtConstP = {\r\n  /* Computed Parameter: sine_table_values_Value\r\n   * Referenced by: '<S20>/sine_table_values'\r\n   */\r\n  { 0.0F, 0.00785390101F, 0.0157073177F, 0.023559764F, 0.0314107575F,\r\n    0.0392598175F, 0.0471064523F, 0.0549501814F, 0.0627905205F, 0.070626989F,\r\n    0.0784591F, 0.086286366F, 0.0941083133F, 0.101924457F, 0.109734312F,\r\n    0.117537394F, 0.125333235F, 0.133121341F, 0.140901238F, 0.148672432F,\r\n    0.156434461F, 0.16418685F, 0.171929106F, 0.179660752F, 0.187381312F,\r\n    0.195090324F, 0.202787295F, 0.210471764F, 0.21814324F, 0.225801274F,\r\n    0.233445361F, 0.241075054F, 0.24868989F, 0.256289363F, 0.263873041F,\r\n    0.271440446F, 0.278991103F, 0.286524564F, 0.294040322F, 0.301537961F,\r\n    0.309017F, 0.316476971F, 0.323917419F, 0.331337899F, 0.338737935F,\r\n    0.346117049F, 0.353474855F, 0.360810816F, 0.368124545F, 0.375415564F,\r\n    0.382683426F, 0.389927685F, 0.397147894F, 0.404343605F, 0.411514372F,\r\n    0.418659747F, 0.425779283F, 0.432872593F, 0.439939171F, 0.446978629F,\r\n    0.453990489F, 0.460974365F, 0.46792981F, 0.474856377F, 0.481753677F,\r\n    0.488621235F, 0.495458663F, 0.502265513F, 0.509041429F, 0.515785873F,\r\n    0.522498548F, 0.529179F, 0.535826802F, 0.542441547F, 0.549022794F,\r\n    0.555570245F, 0.562083364F, 0.568561852F, 0.575005233F, 0.581413209F,\r\n    0.587785244F, 0.594121039F, 0.600420237F, 0.60668236F, 0.612907052F,\r\n    0.619093955F, 0.625242651F, 0.631352782F, 0.637424F, 0.643455863F,\r\n    0.649448037F, 0.655400157F, 0.661311865F, 0.667182744F, 0.673012495F,\r\n    0.678800762F, 0.684547126F, 0.690251231F, 0.695912778F, 0.70153141F,\r\n    0.707106769F, 0.712638497F, 0.718126297F, 0.723569751F, 0.72896862F,\r\n    0.734322488F, 0.739631116F, 0.744894F, 0.750111043F, 0.755281806F,\r\n    0.760405958F, 0.765483201F, 0.770513237F, 0.775495768F, 0.780430436F,\r\n    0.785316944F, 0.790155F, 0.794944346F, 0.799684644F, 0.804375648F, 0.809017F,\r\n    0.813608468F, 0.818149745F, 0.822640538F, 0.827080548F, 0.831469595F,\r\n    0.835807383F, 0.840093553F, 0.844327927F, 0.848510206F, 0.852640152F,\r\n    0.856717527F, 0.860742033F, 0.86471343F, 0.868631542F, 0.872496F,\r\n    0.876306653F, 0.880063295F, 0.883765638F, 0.887413442F, 0.891006529F,\r\n    0.894544661F, 0.898027599F, 0.901455104F, 0.904827058F, 0.908143163F,\r\n    0.911403298F, 0.914607167F, 0.91775465F, 0.920845509F, 0.923879504F,\r\n    0.926856577F, 0.92977649F, 0.932639F, 0.935444057F, 0.938191354F,\r\n    0.940880775F, 0.943512142F, 0.946085334F, 0.948600173F, 0.95105654F,\r\n    0.953454196F, 0.955793F, 0.958072901F, 0.96029371F, 0.962455213F,\r\n    0.964557409F, 0.96660012F, 0.968583167F, 0.970506489F, 0.972369909F,\r\n    0.974173367F, 0.975916743F, 0.977599919F, 0.979222834F, 0.980785251F,\r\n    0.982287228F, 0.983728647F, 0.985109329F, 0.986429274F, 0.987688363F,\r\n    0.988886476F, 0.990023673F, 0.991099775F, 0.992114723F, 0.993068457F,\r\n    0.993961F, 0.994792163F, 0.995561957F, 0.996270359F, 0.996917307F,\r\n    0.997502804F, 0.998026729F, 0.998489082F, 0.998889863F, 0.999229F,\r\n    0.999506533F, 0.999722421F, 0.999876618F, 0.999969184F, 1.0F, 0.999969184F,\r\n    0.999876618F, 0.999722421F, 0.999506533F, 0.999229F, 0.998889863F,\r\n    0.998489082F, 0.998026729F, 0.997502804F, 0.996917307F, 0.996270359F,\r\n    0.995561957F, 0.994792163F, 0.993961F, 0.993068457F, 0.992114723F,\r\n    0.991099775F, 0.990023673F, 0.988886476F, 0.987688363F, 0.986429274F,\r\n    0.985109329F, 0.983728647F, 0.982287228F, 0.980785251F, 0.979222834F,\r\n    0.977599919F, 0.975916743F, 0.974173367F, 0.972369909F, 0.970506489F,\r\n    0.968583167F, 0.96660012F, 0.964557409F, 0.962455213F, 0.96029371F,\r\n    0.958072901F, 0.955793F, 0.953454196F, 0.95105654F, 0.948600173F,\r\n    0.946085334F, 0.943512142F, 0.940880775F, 0.938191354F, 0.935444057F,\r\n    0.932639F, 0.92977649F, 0.926856577F, 0.923879504F, 0.920845509F,\r\n    0.91775465F, 0.914607167F, 0.911403298F, 0.908143163F, 0.904827058F,\r\n    0.901455104F, 0.898027599F, 0.894544661F, 0.891006529F, 0.887413442F,\r\n    0.883765638F, 0.880063295F, 0.876306653F, 0.872496F, 0.868631542F,\r\n    0.86471343F, 0.860742033F, 0.856717527F, 0.852640152F, 0.848510206F,\r\n    0.844327927F, 0.840093553F, 0.835807383F, 0.831469595F, 0.827080548F,\r\n    0.822640538F, 0.818149745F, 0.813608468F, 0.809017F, 0.804375648F,\r\n    0.799684644F, 0.794944346F, 0.790155F, 0.785316944F, 0.780430436F,\r\n    0.775495768F, 0.770513237F, 0.765483201F, 0.760405958F, 0.755281806F,\r\n    0.750111043F, 0.744894F, 0.739631116F, 0.734322488F, 0.72896862F,\r\n    0.723569751F, 0.718126297F, 0.712638497F, 0.707106769F, 0.70153141F,\r\n    0.695912778F, 0.690251231F, 0.684547126F, 0.678800762F, 0.673012495F,\r\n    0.667182744F, 0.661311865F, 0.655400157F, 0.649448037F, 0.643455863F,\r\n    0.637424F, 0.631352782F, 0.625242651F, 0.619093955F, 0.612907052F,\r\n    0.60668236F, 0.600420237F, 0.594121039F, 0.587785244F, 0.581413209F,\r\n    0.575005233F, 0.568561852F, 0.562083364F, 0.555570245F, 0.549022794F,\r\n    0.542441547F, 0.535826802F, 0.529179F, 0.522498548F, 0.515785873F,\r\n    0.509041429F, 0.502265513F, 0.495458663F, 0.488621235F, 0.481753677F,\r\n    0.474856377F, 0.46792981F, 0.460974365F, 0.453990489F, 0.446978629F,\r\n    0.439939171F, 0.432872593F, 0.425779283F, 0.418659747F, 0.411514372F,\r\n    0.404343605F, 0.397147894F, 0.389927685F, 0.382683426F, 0.375415564F,\r\n    0.368124545F, 0.360810816F, 0.353474855F, 0.346117049F, 0.338737935F,\r\n    0.331337899F, 0.323917419F, 0.316476971F, 0.309017F, 0.301537961F,\r\n    0.294040322F, 0.286524564F, 0.278991103F, 0.271440446F, 0.263873041F,\r\n    0.256289363F, 0.24868989F, 0.241075054F, 0.233445361F, 0.225801274F,\r\n    0.21814324F, 0.210471764F, 0.202787295F, 0.195090324F, 0.187381312F,\r\n    0.179660752F, 0.171929106F, 0.16418685F, 0.156434461F, 0.148672432F,\r\n    0.140901238F, 0.133121341F, 0.125333235F, 0.117537394F, 0.109734312F,\r\n    0.101924457F, 0.0941083133F, 0.086286366F, 0.0784591F, 0.070626989F,\r\n    0.0627905205F, 0.0549501814F, 0.0471064523F, 0.0392598175F, 0.0314107575F,\r\n    0.023559764F, 0.0157073177F, 0.00785390101F, 1.22464685E-16F,\r\n    -0.00785390101F, -0.0157073177F, -0.023559764F, -0.0314107575F,\r\n    -0.0392598175F, -0.0471064523F, -0.0549501814F, -0.0627905205F,\r\n    -0.070626989F, -0.0784591F, -0.086286366F, -0.0941083133F, -0.101924457F,\r\n    -0.109734312F, -0.117537394F, -0.125333235F, -0.133121341F, -0.140901238F,\r\n    -0.148672432F, -0.156434461F, -0.16418685F, -0.171929106F, -0.179660752F,\r\n    -0.187381312F, -0.195090324F, -0.202787295F, -0.210471764F, -0.21814324F,\r\n    -0.225801274F, -0.233445361F, -0.241075054F, -0.24868989F, -0.256289363F,\r\n    -0.263873041F, -0.271440446F, -0.278991103F, -0.286524564F, -0.294040322F,\r\n    -0.301537961F, -0.309017F, -0.316476971F, -0.323917419F, -0.331337899F,\r\n    -0.338737935F, -0.346117049F, -0.353474855F, -0.360810816F, -0.368124545F,\r\n    -0.375415564F, -0.382683426F, -0.389927685F, -0.397147894F, -0.404343605F,\r\n    -0.411514372F, -0.418659747F, -0.425779283F, -0.432872593F, -0.439939171F,\r\n    -0.446978629F, -0.453990489F, -0.460974365F, -0.46792981F, -0.474856377F,\r\n    -0.481753677F, -0.488621235F, -0.495458663F, -0.502265513F, -0.509041429F,\r\n    -0.515785873F, -0.522498548F, -0.529179F, -0.535826802F, -0.542441547F,\r\n    -0.549022794F, -0.555570245F, -0.562083364F, -0.568561852F, -0.575005233F,\r\n    -0.581413209F, -0.587785244F, -0.594121039F, -0.600420237F, -0.60668236F,\r\n    -0.612907052F, -0.619093955F, -0.625242651F, -0.631352782F, -0.637424F,\r\n    -0.643455863F, -0.649448037F, -0.655400157F, -0.661311865F, -0.667182744F,\r\n    -0.673012495F, -0.678800762F, -0.684547126F, -0.690251231F, -0.695912778F,\r\n    -0.70153141F, -0.707106769F, -0.712638497F, -0.718126297F, -0.723569751F,\r\n    -0.72896862F, -0.734322488F, -0.739631116F, -0.744894F, -0.750111043F,\r\n    -0.755281806F, -0.760405958F, -0.765483201F, -0.770513237F, -0.775495768F,\r\n    -0.780430436F, -0.785316944F, -0.790155F, -0.794944346F, -0.799684644F,\r\n    -0.804375648F, -0.809017F, -0.813608468F, -0.818149745F, -0.822640538F,\r\n    -0.827080548F, -0.831469595F, -0.835807383F, -0.840093553F, -0.844327927F,\r\n    -0.848510206F, -0.852640152F, -0.856717527F, -0.860742033F, -0.86471343F,\r\n    -0.868631542F, -0.872496F, -0.876306653F, -0.880063295F, -0.883765638F,\r\n    -0.887413442F, -0.891006529F, -0.894544661F, -0.898027599F, -0.901455104F,\r\n    -0.904827058F, -0.908143163F, -0.911403298F, -0.914607167F, -0.91775465F,\r\n    -0.920845509F, -0.923879504F, -0.926856577F, -0.92977649F, -0.932639F,\r\n    -0.935444057F, -0.938191354F, -0.940880775F, -0.943512142F, -0.946085334F,\r\n    -0.948600173F, -0.95105654F, -0.953454196F, -0.955793F, -0.958072901F,\r\n    -0.96029371F, -0.962455213F, -0.964557409F, -0.96660012F, -0.968583167F,\r\n    -0.970506489F, -0.972369909F, -0.974173367F, -0.975916743F, -0.977599919F,\r\n    -0.979222834F, -0.980785251F, -0.982287228F, -0.983728647F, -0.985109329F,\r\n    -0.986429274F, -0.987688363F, -0.988886476F, -0.990023673F, -0.991099775F,\r\n    -0.992114723F, -0.993068457F, -0.993961F, -0.994792163F, -0.995561957F,\r\n    -0.996270359F, -0.996917307F, -0.997502804F, -0.998026729F, -0.998489082F,\r\n    -0.998889863F, -0.999229F, -0.999506533F, -0.999722421F, -0.999876618F,\r\n    -0.999969184F, -1.0F, -0.999969184F, -0.999876618F, -0.999722421F,\r\n    -0.999506533F, -0.999229F, -0.998889863F, -0.998489082F, -0.998026729F,\r\n    -0.997502804F, -0.996917307F, -0.996270359F, -0.995561957F, -0.994792163F,\r\n    -0.993961F, -0.993068457F, -0.992114723F, -0.991099775F, -0.990023673F,\r\n    -0.988886476F, -0.987688363F, -0.986429274F, -0.985109329F, -0.983728647F,\r\n    -0.982287228F, -0.980785251F, -0.979222834F, -0.977599919F, -0.975916743F,\r\n    -0.974173367F, -0.972369909F, -0.970506489F, -0.968583167F, -0.96660012F,\r\n    -0.964557409F, -0.962455213F, -0.96029371F, -0.958072901F, -0.955793F,\r\n    -0.953454196F, -0.95105654F, -0.948600173F, -0.946085334F, -0.943512142F,\r\n    -0.940880775F, -0.938191354F, -0.935444057F, -0.932639F, -0.92977649F,\r\n    -0.926856577F, -0.923879504F, -0.920845509F, -0.91775465F, -0.914607167F,\r\n    -0.911403298F, -0.908143163F, -0.904827058F, -0.901455104F, -0.898027599F,\r\n    -0.894544661F, -0.891006529F, -0.887413442F, -0.883765638F, -0.880063295F,\r\n    -0.876306653F, -0.872496F, -0.868631542F, -0.86471343F, -0.860742033F,\r\n    -0.856717527F, -0.852640152F, -0.848510206F, -0.844327927F, -0.840093553F,\r\n    -0.835807383F, -0.831469595F, -0.827080548F, -0.822640538F, -0.818149745F,\r\n    -0.813608468F, -0.809017F, -0.804375648F, -0.799684644F, -0.794944346F,\r\n    -0.790155F, -0.785316944F, -0.780430436F, -0.775495768F, -0.770513237F,\r\n    -0.765483201F, -0.760405958F, -0.755281806F, -0.750111043F, -0.744894F,\r\n    -0.739631116F, -0.734322488F, -0.72896862F, -0.723569751F, -0.718126297F,\r\n    -0.712638497F, -0.707106769F, -0.70153141F, -0.695912778F, -0.690251231F,\r\n    -0.684547126F, -0.678800762F, -0.673012495F, -0.667182744F, -0.661311865F,\r\n    -0.655400157F, -0.649448037F, -0.643455863F, -0.637424F, -0.631352782F,\r\n    -0.625242651F, -0.619093955F, -0.612907052F, -0.60668236F, -0.600420237F,\r\n    -0.594121039F, -0.587785244F, -0.581413209F, -0.575005233F, -0.568561852F,\r\n    -0.562083364F, -0.555570245F, -0.549022794F, -0.542441547F, -0.535826802F,\r\n    -0.529179F, -0.522498548F, -0.515785873F, -0.509041429F, -0.502265513F,\r\n    -0.495458663F, -0.488621235F, -0.481753677F, -0.474856377F, -0.46792981F,\r\n    -0.460974365F, -0.453990489F, -0.446978629F, -0.439939171F, -0.432872593F,\r\n    -0.425779283F, -0.418659747F, -0.411514372F, -0.404343605F, -0.397147894F,\r\n    -0.389927685F, -0.382683426F, -0.375415564F, -0.368124545F, -0.360810816F,\r\n    -0.353474855F, -0.346117049F, -0.338737935F, -0.331337899F, -0.323917419F,\r\n    -0.316476971F, -0.309017F, -0.301537961F, -0.294040322F, -0.286524564F,\r\n    -0.278991103F, -0.271440446F, -0.263873041F, -0.256289363F, -0.24868989F,\r\n    -0.241075054F, -0.233445361F, -0.225801274F, -0.21814324F, -0.210471764F,\r\n    -0.202787295F, -0.195090324F, -0.187381312F, -0.179660752F, -0.171929106F,\r\n    -0.16418685F, -0.156434461F, -0.148672432F, -0.140901238F, -0.133121341F,\r\n    -0.125333235F, -0.117537394F, -0.109734312F, -0.101924457F, -0.0941083133F,\r\n    -0.086286366F, -0.0784591F, -0.070626989F, -0.0627905205F, -0.0549501814F,\r\n    -0.0471064523F, -0.0392598175F, -0.0314107575F, -0.023559764F,\r\n    -0.0157073177F, -0.00785390101F, -2.44929371E-16F, 0.00785390101F,\r\n    0.0157073177F, 0.023559764F, 0.0314107575F, 0.0392598175F, 0.0471064523F,\r\n    0.0549501814F, 0.0627905205F, 0.070626989F, 0.0784591F, 0.086286366F,\r\n    0.0941083133F, 0.101924457F, 0.109734312F, 0.117537394F, 0.125333235F,\r\n    0.133121341F, 0.140901238F, 0.148672432F, 0.156434461F, 0.16418685F,\r\n    0.171929106F, 0.179660752F, 0.187381312F, 0.195090324F, 0.202787295F,\r\n    0.210471764F, 0.21814324F, 0.225801274F, 0.233445361F, 0.241075054F,\r\n    0.24868989F, 0.256289363F, 0.263873041F, 0.271440446F, 0.278991103F,\r\n    0.286524564F, 0.294040322F, 0.301537961F, 0.309017F, 0.316476971F,\r\n    0.323917419F, 0.331337899F, 0.338737935F, 0.346117049F, 0.353474855F,\r\n    0.360810816F, 0.368124545F, 0.375415564F, 0.382683426F, 0.389927685F,\r\n    0.397147894F, 0.404343605F, 0.411514372F, 0.418659747F, 0.425779283F,\r\n    0.432872593F, 0.439939171F, 0.446978629F, 0.453990489F, 0.460974365F,\r\n    0.46792981F, 0.474856377F, 0.481753677F, 0.488621235F, 0.495458663F,\r\n    0.502265513F, 0.509041429F, 0.515785873F, 0.522498548F, 0.529179F,\r\n    0.535826802F, 0.542441547F, 0.549022794F, 0.555570245F, 0.562083364F,\r\n    0.568561852F, 0.575005233F, 0.581413209F, 0.587785244F, 0.594121039F,\r\n    0.600420237F, 0.60668236F, 0.612907052F, 0.619093955F, 0.625242651F,\r\n    0.631352782F, 0.637424F, 0.643455863F, 0.649448037F, 0.655400157F,\r\n    0.661311865F, 0.667182744F, 0.673012495F, 0.678800762F, 0.684547126F,\r\n    0.690251231F, 0.695912778F, 0.70153141F, 0.707106769F, 0.712638497F,\r\n    0.718126297F, 0.723569751F, 0.72896862F, 0.734322488F, 0.739631116F,\r\n    0.744894F, 0.750111043F, 0.755281806F, 0.760405958F, 0.765483201F,\r\n    0.770513237F, 0.775495768F, 0.780430436F, 0.785316944F, 0.790155F,\r\n    0.794944346F, 0.799684644F, 0.804375648F, 0.809017F, 0.813608468F,\r\n    0.818149745F, 0.822640538F, 0.827080548F, 0.831469595F, 0.835807383F,\r\n    0.840093553F, 0.844327927F, 0.848510206F, 0.852640152F, 0.856717527F,\r\n    0.860742033F, 0.86471343F, 0.868631542F, 0.872496F, 0.876306653F,\r\n    0.880063295F, 0.883765638F, 0.887413442F, 0.891006529F, 0.894544661F,\r\n    0.898027599F, 0.901455104F, 0.904827058F, 0.908143163F, 0.911403298F,\r\n    0.914607167F, 0.91775465F, 0.920845509F, 0.923879504F, 0.926856577F,\r\n    0.92977649F, 0.932639F, 0.935444057F, 0.938191354F, 0.940880775F,\r\n    0.943512142F, 0.946085334F, 0.948600173F, 0.95105654F, 0.953454196F,\r\n    0.955793F, 0.958072901F, 0.96029371F, 0.962455213F, 0.964557409F,\r\n    0.96660012F, 0.968583167F, 0.970506489F, 0.972369909F, 0.974173367F,\r\n    0.975916743F, 0.977599919F, 0.979222834F, 0.980785251F, 0.982287228F,\r\n    0.983728647F, 0.985109329F, 0.986429274F, 0.987688363F, 0.988886476F,\r\n    0.990023673F, 0.991099775F, 0.992114723F, 0.993068457F, 0.993961F,\r\n    0.994792163F, 0.995561957F, 0.996270359F, 0.996917307F, 0.997502804F,\r\n    0.998026729F, 0.998489082F, 0.998889863F, 0.999229F, 0.999506533F,\r\n    0.999722421F, 0.999876618F, 0.999969184F, 1.0F, 0.999969184F }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"G:\\desktop\\Electrical_Machine\\BLDC\\BLDC_2024_1\\ACM4010\\MODEL\\Decoder_FOC_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Decoder_FOC'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Sun Aug  4 23:04:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};